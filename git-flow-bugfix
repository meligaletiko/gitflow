#
# git-flow -- A collection of Git extensions to provide high-level
# repository operations for Vincent Driessen's branching model.
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# Feel free to contribute to this project at:
#    http://github.com/nvie/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

init() {
  require_git_repo
  require_gitflow_initialized
  gitflow_load_settings
  load_prefix_with_sprint
}

usage() {
  echo "usage: git flow bugfix [list]"
  echo "       git flow bugfix start <name>"
}

cmd_default() {
  cmd_list "%@"
}

cmd_list() {
  parse_args "$@"

  local feature_branches
  local current_branch
  local short_names
  feature_branches=$(echo "$(git_local_branches)" | grep "^$PREFIX")
  if [ -z "$feature_branches" ]; then
    warn "No bugfix branches exist."
    warn ""
    warn "You can start a new bugfix branch:"
    warn ""
    warn "    git flow bugfix start <name> [<base>]"
    warn ""
    exit 0
  fi
  current_branch=$(git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g')
  short_names=$(echo "$feature_branches" | sed "s ^$PREFIX  g")

  # determine column width first
  local width=0
  local branch
  for branch in $short_names; do
    local len=${#branch}
    width=$(max $width $len)
  done
  width=$(($width+3))

  local branch
  for branch in $short_names; do
    local fullname=$PREFIX$branch
    local base=$(git merge-base "$fullname" "$DEVELOP_BRANCH")
    local develop_sha=$(git rev-parse "$DEVELOP_BRANCH")
    local branch_sha=$(git rev-parse "$fullname")
    if [ "$fullname" = "$current_branch" ]; then
      printf "* "
    else
      printf "  "
    fi
    if flag verbose; then
      printf "%-${width}s" "$branch"
      if [ "$branch_sha" = "$develop_sha" ]; then
        printf "(no commits yet)"
      elif [ "$base" = "$branch_sha" ]; then
        printf "(is behind develop, may ff)"
      elif [ "$base" = "$develop_sha" ]; then
        printf "(based on latest develop)"
      else
        printf "(may be rebased)"
      fi
    else
      printf "%s" "$branch"
    fi
    echo
  done

}

cmd_start() {
  DEFINE_boolean fetch false 'fetch from origin before performing local operation' F
  parse_args "$@"
  BASE=${2:-$DEVELOP_BRANCH}
  require_name_arg

  # sanity checks
  require_branch_absent "$BRANCH"

  # update the local repo with remote changes, if asked
  if flag fetch; then
    git_do fetch -q "$ORIGIN" "$DEVELOP_BRANCH"
  fi

  # if the origin branch counterpart exists, assert that the local branch
  # isn't behind it (to avoid unnecessary rebasing)
  if git_branch_exists "$ORIGIN/$DEVELOP_BRANCH"; then
    require_branches_equal "$DEVELOP_BRANCH" "$ORIGIN/$DEVELOP_BRANCH"
  fi

  # create branch
  if ! git_do checkout -b "$BRANCH" "$BASE"; then
    die "Could not create feature branch '$BRANCH'"
  fi

  echo
  echo "Summary of actions:"
  echo "- A new branch '$BRANCH' was created, based on '$BASE'"
  echo "- You are now on branch '$BRANCH'"
  echo ""
  echo "Now, start committing on your feature. When done, use:"
  echo ""
  echo "     git flow bugfix finish $NAME"
  echo
}

cmd_help() {
  usage
  exit 0
}

cmd_pullrequest() {
  # Load the name of branch
  name_or_current

  # Only proceeds if the tree is cleaning
  require_clean_working_tree

  # Load all the required variables needed for pull request
  require_args_for_pull_request

  hub pull-request -b $REMOTE_BRANCH
}

load_prefix_with_sprint() {
  PREFIX=$(git config --get gitflow.prefix.feature)
  SPRINT=$(git config --get gitflow.sprint.current)

  if [ -n $SPRINT ]; then
    PREFIX=$SPRINT$PREFIX
  fi
}


# Helper functions

load_prefix_with_sprint() {
  PREFIX=$(git config --get gitflow.prefix.bugfix)
  SPRINT=$(git config --get gitflow.sprint.current)

  if [ -n $SPRINT ]; then
    PREFIX=$SPRINT$PREFIX
  fi
}

parse_args() {
  # parse options
  FLAGS "$@" || exit $?
  eval set -- "${FLAGS_ARGV}"

  # read arguments into global variables
  NAME=$1
  BRANCH=$PREFIX$NAME
}

require_name_arg() {
  if [ "$NAME" = "" ]; then
    warn "Missing argument <name>"
    usage
    exit 1
  fi
}

require_args_for_pull_request () {
  local pullrequestenabled=$(git config --get gitflow.pullrequest.enabled)

  if [ "$pullrequestenabled" = "Y" ]; then
    REMOTE=$(git config --get gitflow.pullrequest.remote.name)
    REMOTE_BRANCH=$(git config --get gitflow.pullrequest.remote.name):$(git config --get gitflow.pullrequest.remote.branch)
  else
    die "Pull request feature disabled."
  fi
}

use_current_feature_branch_name() {
  local current_branch=$(git_current_branch)
  if startswith "$current_branch" "$PREFIX"; then
    BRANCH=$current_branch
    NAME=${BRANCH#$PREFIX}
  else
    warn "The current HEAD is no feature branch."
    warn "Please specify a <name> argument."
    exit 1
  fi
}

name_or_current() {
  if [ -z "$NAME" ]; then
    use_current_feature_branch_name
  fi
}
